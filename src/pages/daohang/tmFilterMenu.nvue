<template>
	<tm-app>
		<view class="pa-24">
			<tm-text
				:label="'展开第一个菜单，自动吸到到顶部并滚动屏幕后跟随页面滚动（需要把本组件放到fiexd或者tmSticky组件内才可实现跟随屏幕滚动）。下面第二个筛选菜单为静态展示，不跟随页面滚动'"
			></tm-text>
		</view>
		
		<tm-sticky :offset="stop">
			<template v-slot:sticky>
				<tm-filterMenu :fixed="true">
					<tm-filterMenu-item icon="tmicon-filter-fill" un-icon="tmicon-filter" :height="450" title="筛选">
						<tm-text
							:font-size="24"
							_class="text-weight-b"
							label="为了针对性的数据结构体设计问题.本下拉菜单过滤器,不提供数据结构,也不处理数据,全交由用户自行处理,我只处理动效."
						></tm-text>
					</tm-filterMenu-item>
					<tm-filterMenu-item title="价格排序">
						<tm-text :font-size="24" _class="text-weight-b" label="数据由用户处理"></tm-text>
					</tm-filterMenu-item>
					<tm-filterMenu-item :height="650" title="更多" un-icon="tmicon-stepmode" icon="tmicon-menu">
						<tm-text :font-size="24" _class="text-weight-b" label="数据由用户处理"></tm-text>
					</tm-filterMenu-item>
					<tm-filterMenu-item isButton title="价格排序" un-icon="tmicon-sort" icon="tmicon-sort"> </tm-filterMenu-item>
				</tm-filterMenu>
			</template>
			<view style="height: 2000px">
				<tm-sheet :margin="[0, 24]">
					<tm-text :fontSize="24" _class="text-weight-b" label="下面是一个静态的示例."></tm-text>
				</tm-sheet>
				<tm-filterMenu ref="filter">
					<tm-filterMenu-item :footerHeight="100" icon="tmicon-filter-fill" un-icon="tmicon-filter" :height="450" title="多选项">
						<tm-checkbox-group  direction="customCol" v-model="checbox" :default-value="checbox">
							<tm-checkbox :value="item.id" v-for="(item, index) in checboxList" :key="index" :custom="false">
								<template v-slot:default="{ checked }" class="flex-1">
									<view
										:userInteractionEnabled="false"
										hover-class="opactiy-7"
										class="flex-1 flex-row flex flex-row-center-between"
										style="height: 76rpx;width:100%"
									>
										<tm-text :color="checked.checked ? 'primary' : ''" :label="item.text"></tm-text>
										<tm-icon :font-size="24" color="primary" v-if="checked.checked" name="tmicon-check"></tm-icon>
									</view>
								</template>
							</tm-checkbox>
						</tm-checkbox-group>
						<template v-slot:footer>
							<view class="flex flex-row flex-row-between">
								<view class="pl-24 pr-12 flex-1">
									<tm-button @click="filter.close()" :shadow="0" text :outlined="true" block label="取消"></tm-button>
								</view>
								<view class="pr-24 pl-12 flex-1">
									<tm-button @click="filter.close()" block :border="1" label="确认"></tm-button>
								</view>
							</view>
						</template>
					</tm-filterMenu-item>
					<tm-filterMenu-item :footerHeight="100" title="单选项">
						<tm-radio-group direction="customCol" v-model="radiobox" :default-value="radiobox">
							<tm-radio :value="item.id" v-for="(item, index) in radioList3" :key="index" :custom="false">
								<template v-slot:default="{ checked }">
									<view
										:userInteractionEnabled="false"
										hover-class="opactiy-7"
										class="flex-1 flex-row flex flex-row-center-between"
										style="height: 76rpx"
									>
										<tm-text :color="checked.checked ? 'primary' : ''" :label="item.text"></tm-text>
										<tm-icon :font-size="24" color="primary" v-if="checked.checked" name="tmicon-check"></tm-icon>
									</view>
								</template>
							</tm-radio>
						</tm-radio-group>
						<template v-slot:footer>
							<view class="flex flex-row flex-row-between">
								<view class="pl-24 pr-12 flex-1">
									<tm-button @click="filter.close()" :shadow="0" text :outlined="true" block label="取消"></tm-button>
								</view>
								<view class="pr-24 pl-12 flex-1">
									<tm-button @click="filter.close()" block :border="1" label="确认"></tm-button>
								</view>
							</view>
						</template>
					</tm-filterMenu-item>
					<tm-filterMenu-item :footerHeight="100" :height="650" title="杂类选项" un-icon="tmicon-stepmode" icon="tmicon-menu">
						<tm-text :font-size="28" _class="text-weight-b" label="可以随便放自己想要的组件作为过滤"></tm-text>
						<tm-divider></tm-divider>
						<tm-text :font-size="32" _class="text-weight-b py-24" label="输入框"></tm-text>
						<tm-input v-model="inputValue"></tm-input>
						<tm-text :font-size="32" _class="text-weight-b py-24" label="tag选项"></tm-text>
						<tm-checkbox-group v-model="checbox2" :default-value="checbox2">
							<tm-checkbox :value="item.id" v-for="(item, index) in checboxList2" :key="index" :custom="false">
								<template v-slot:default="{ checked }">
									<tm-tag
										:userInteractionEnabled="false"
										:label="item.text"
										:border="1"
										:shadow="0"
										:text="!checked.checked"
									></tm-tag>
								</template>
							</tm-checkbox>
						</tm-checkbox-group>
						<template v-slot:footer>
							<view class="flex flex-row flex-row-between">
								<view class="pl-24 pr-12 flex-1">
									<tm-button @click="filter.close()" :shadow="0" text :outlined="true" block label="取消"></tm-button>
								</view>
								<view class="pr-24 pl-12 flex-1">
									<tm-button @click="filter.close()" block :border="1" label="确认"></tm-button>
								</view>
							</view>
						</template>
					</tm-filterMenu-item>
					<tm-filterMenu-item isButton title="按钮选项" un-icon="tmicon-ios-radio-button-off" icon="tmicon-ios-radio-button-on">
					</tm-filterMenu-item>
				</tm-filterMenu>
			</view>
		</tm-sticky>
	</tm-app>
</template>
<script lang="ts" setup>
import { ref, Ref, getCurrentInstance } from 'vue'
import { onShow, onLoad } from '@dcloudio/uni-app'
import tmApp from '@/tmui/components/tm-app/tm-app.vue'
import tmSheet from '@/tmui/components/tm-sheet/tm-sheet.vue'
import tmText from '@/tmui/components/tm-text/tm-text.vue'
import tmFilterMenu from '@/tmui/components/tm-filterMenu/tm-filterMenu.vue'
import tmFilterMenuItem from '@/tmui/components/tm-filterMenu-item/tm-filterMenu-item.vue'
import tmCheckboxGroup from '@/tmui/components/tm-checkbox-group/tm-checkbox-group.vue'
import tmCheckbox from '@/tmui/components/tm-checkbox/tm-checkbox.vue'
import tmIcon from '@/tmui/components/tm-icon/tm-icon.vue'
import tmRadioGroup from '@/tmui/components/tm-radio-group/tm-radio-group.vue'
import tmRadio from '@/tmui/components/tm-radio/tm-radio.vue'
import tmInput from '@/tmui/components/tm-input/tm-input.vue'
import tmDivider from '@/tmui/components/tm-divider/tm-divider.vue'
import tmTag from '@/tmui/components/tm-tag/tm-tag.vue'
import tmButton from '@/tmui/components/tm-button/tm-button.vue'
import tmSticky from '@/tmui/components/tm-sticky/tm-sticky.vue'
const filter = ref<InstanceType<typeof tmFilterMenu | null>>(null)
const checbox: Ref<Array<string | number>> = ref([])
const checbox2: Ref<Array<string | number>> = ref([])
const radiobox: Ref<string | number> = ref('')
const inputValue = ref('')
let stop = ref(0)
// #ifdef H5
stop.value = uni.$tm.u.torpx(44)
// #endif

const checboxList = ref([
	{ text: '测试项目1-1', id: '1' },
	{ text: '测试项目2-1', id: '2' },
	{ text: '测试项目3-1', id: '3' },
	{ text: '测试项目4-1', id: '4' },
	{ text: '测试项目5-1', id: '5' }
])
const checboxList2 = ref([
	{ text: '哈哈1', id: '1' },
	{ text: '哈哈2-1', id: '2' },
	{ text: '哈哈3-1', id: '3' },
	{ text: '哈哈4-1', id: '4' },
	{ text: '哈哈5-1', id: '5' }
])
const radioList3 = ref([
	{ text: 'radio1', id: '1' },
	{ text: 'radio12-1', id: '2' },
	{ text: 'radio13-1', id: '3' },
	{ text: 'radio14-1', id: '4' },
	{ text: 'radio15-1', id: '5' }
])
</script>
