<template>
	<view class="bodyBox">
		<view style="height: 100px;background-color: yellow;">
			区域1
		</view>
		<view class="bodyBoxContent">
			<scroll-view :scroll-into-view="leftId" :scroll-with-animation="true" :scroll-y="true" :style="{height:contentHeight+'px'}" class="bodyBoxContentScroll leftScroll">
				<view @click="menuClickEvent(index)" :id="'leftItemId'+index" :class="[leftIndex==index?'on':'']" class="menuitem "  v-for="(item,index) in menuList" :key="index">
					<text>{{item.title}}</text>
				</view>
			</scroll-view>
			<scroll-view @scroll="contentScrollEvent" :scroll-with-animation="true" :scroll-into-view="rightId" :scroll-y="true" :style="{height:contentHeight+'px'}" class="bodyBoxContentScroll rightScroll">
				<view class="card" :id="'rightItemId'+index" v-for="(item,index) in rightList" :key="index">
					<view class="title">{{item.title}}</view>
					<view class="items">
						<view class="itemsChildren" v-for="(item2,index2) in item.children" :key="index2">
							{{item2.title}}
						</view>
					</view>
				</view>
			</scroll-view>
		</view>
		<view style="padding:50px;background-color: red;">
			区域4
		</view>
	</view>
</template>

<script lang="ts" setup>
	import { ref, getCurrentInstance, computed, inject, onMounted,nextTick } from 'vue'
	import { onShow, onLoad, onInit } from '@dcloudio/uni-app'
	type nodeType = {
		top:number,
		height:number,
		id:string
	}
	const menuList = ref([])
	const rightList = ref([])
	const contentHeight = ref(0)
	const contentTop = ref(0)
	const leftId = ref("leftItemId0")
	const leftIndex = ref(0)
	const rightId = ref("rightItemId0")
	
	const menuListNodes = ref<nodeType[]>([])
	const cardListNodes = ref<nodeType[]>([])
	const proxy = getCurrentInstance()!.proxy;
	
	onMounted(()=>{
		createQuereyHeight();
	})
	onLoad(()=>{
		getData();
		//等布局渲染完成。
		setTimeout(function() {
			getListNodes();
		}, 150);
	})
	function menuClickEvent(index:number){
		leftIndex.value = index
		rightId.value = 'rightItemId'+index;
	}
	
	function contentScrollEvent(evt){
		let top = evt.detail.scrollTop;
		let lastIndex = cardListNodes.value.findIndex((el)=>el.top+el.height-contentTop.value>top)
		if(lastIndex>-1&&leftIndex.value!=lastIndex){
			leftIndex.value = lastIndex
			leftId.value = "leftItemId" + leftIndex.value 
		}
	}
	
	function getData(){
		for(let i=0;i<20;i++){
			menuList.value.push({title:"菜单1"+i,id:i})
			
			let item = {
				title:"类目"+i,
				children:[]
			}
			for(let j=0;j<20;j++){
				item.children.push({title:"项目1"+j,id:j})
			}
			rightList.value.push(item)
		}
	}
	function createQuereyHeight(){
		uni.createSelectorQuery()
		.in(proxy)
		.select(".bodyBoxContent")
		.boundingClientRect()
		.exec((node=>{
			let nd = node[0]
			contentHeight.value = nd.height;
			contentTop.value = nd.top;
		}))
	}
	/**
	 * 如果更新了menu菜单 和右菜单 ，应该要重新执行下面的函数。
	 * 一定要在数据赋值后使用next执行
	 */
	function getListNodes(){
		uni.createSelectorQuery()
		.in(proxy)
		.selectAll(".menuitem")
		.boundingClientRect()
		.exec((node=>{
			menuListNodes.value = []
			node[0].forEach(el=>{
				menuListNodes.value.push({
					id:el.id,
					top:el.top,
					height:el.height
				})
			})
		}))
		uni.createSelectorQuery()
		.in(proxy)
		.selectAll(".card")
		.boundingClientRect()
		.exec((node=>{
			cardListNodes.value = []
			node[0].forEach(el=>{
				cardListNodes.value.push({
					id:el.id,
					top:el.top,
					height:el.height
				})
			})
		}))
	}
</script>

<style scoped>
	.card{
		box-sizing: border-box;
		border-radius: 24rpx;
		background-color: white;
		box-shadow: 0 3px 16px rgba(0, 0, 0, 0.06);
		margin: 0 24rpx 24rpx 24rpx;
	}
	.card:first-child{
		margin-top: 24rpx;
	}
	.itemsChildren{
		box-sizing: border-box;
		padding: 20rpx 24rpx;
		font-size: 28rpx;
		border-bottom: 1px solid #eee;
	}
	
	.title{
		box-sizing: border-box;
		padding: 24rpx 24rpx;
		font-size: 36rpx;
		font-weight: bold;
	}
	.menuitem{
		box-sizing: border-box;
		height: 88rpx;
		display: flex;
		flex-direction: column;
		justify-content: center;
		align-items: center;
	}
	.menuitem.on{
		background-color: white;
		border-left: 2px solid red;
	}
	.leftScroll{
		width:240rpx;
		background-color: #f5f5f5;
		
	}
	.rightScroll{
		flex:1;
		background-color: white;
		
	}
	.bodyBoxContentScroll{
		
	}
	.bodyBox{
		height: 100vh;
		width: 100%;
		display: flex;
		flex-direction: column;
	}
	.bodyBoxContent{
		flex: 1;
		display: flex;
		flex-direction: row;
		justify-content: space-between;
	}
</style>



